// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PageType {
  ITEMS
  SUBPROTOCOL
}

enum ItemGroupType {
  SINGLE_ITEM
  MULTIPLE_ITEMS
  TABLE
}

enum ItemType {
  TEXTBOX
  CHECKBOX
  RADIO
  SELECT
  SCALE
  TEXT
  UPLOAD
  DATEBOX
  NUMBERBOX
  TIMEBOX
  LOCATIONBOX
}

enum InstitutionType {
  PRIMARY
  LOWER_SECONDARY
  UPPER_SECONDARY
  TERTIARY
}

enum UserRole {
  USER
  APPLIER
  PUBLISHER
  COORDINATOR
  ADMIN
}

enum VisibilityMode {
  PUBLIC
  RESTRICT
}

enum ItemValidationType {
  MANDATORY
  MIN
  MAX
  MAX_ANSWERS
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  city    String
  state   String
  country String

  institutions       Institution[]
  applicationAnswers ApplicationAnswer[]

  @@unique([city, state, country])
}

model ApplicationAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  date DateTime

  itemAnswerGroups ItemAnswerGroup[]

  userId        Int?
  user          User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  addressId     Int?
  address       Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
}

model ItemAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  text String?

  files File[]

  itemId  Int
  item    Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  groupId Int
  group   ItemAnswerGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ItemAnswerGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  itemAnswers   ItemAnswer[]
  optionAnswers OptionAnswer[]
  tableAnswers  TableAnswer[]

  applicationAnswerId Int
  applicationAnswer   ApplicationAnswer @relation(fields: [applicationAnswerId], references: [id], onDelete: Cascade)
}

model OptionAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  text String?

  itemId   Int
  item     Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  groupId  Int
  group    ItemAnswerGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  optionId Int
  option   ItemOption      @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model TableAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  text String?

  itemId   Int
  item     Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  groupId  Int
  group    ItemAnswerGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  columnId Int
  column   TableColumn     @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model Institution {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  name String
  type InstitutionType

  users      User[]
  classrooms Classroom[]

  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  name          String
  username      String   @unique
  hash          String
  role          UserRole
  acceptedTerms Boolean  @default(false)

  createdProtocols     Protocol[]          @relation(name: "Creator") // protocols that the user has created
  ownedProtocols            Protocol[]          @relation(name: "OwnersProtocols") // protocols that the user can edit
  answeredApplications ApplicationAnswer[]
  applications         Application[]       @relation(name: "Applier") // applications that the user has created
  visibleApplications  Application[]       @relation(name: "ApplicationViewersUser") // applications that the user can see
  visibleProtocols     Protocol[]          @relation(name: "ProtocolViewersUsers") // protocols that the user can see
  appliableProtocols   Protocol[]          @relation(name: "Appliers") // protocols that the user can apply
  visibleProtocolAnswers Protocol[]       @relation(name: "ProtocolAnswersViewersUsers") // protocols that the user can see the answers
  visibleApplicationAnswers Application[] @relation(name: "ApplicationAnswersViewersUsers") // applications that the user can see the answers
  classrooms           Classroom[]

  institutionId Int?
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull)
}

model Classroom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  users               User[]
  visibleApplications Application[] @relation(name: "ApplicationViewersClassroom") // applications that the classroom can see
  visibleProtocols    Protocol[] @relation(name: "ProtocolViewersClassroom") // protocols that the classroom can see
  visibleProtocolAnswers Protocol[] @relation(name: "ProtocolAnswersViewersClassroom") // protocols that the classroom can see the answers
  visibleApplicationAnswers Application[] @relation(name: "ApplicationAnswersViewersClassroom") // applications that the classroom can see the answers

  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

model Application {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visibility VisibilityMode
  answersVisibility VisibilityMode

  answers          ApplicationAnswer[]
  viewersClassroom Classroom[] @relation(name: "ApplicationViewersClassroom") // classrooms that can see the application
  viewersUser      User[]              @relation(name: "ApplicationViewersUser") // users that can see the application
  answersViewersUser User[] @relation(name: "ApplicationAnswersViewersUsers") // users that can see the answers
  answersViewersClassroom Classroom[] @relation(name: "ApplicationAnswersViewersClassroom") // classrooms that can see the answers

  protocolId   Int
  protocol     Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  applierId Int
  applier   User     @relation(name: "Applier", fields: [applierId], references: [id], onDelete: Cascade)
}

model Protocol {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  title       String
  description String?
  enabled     Boolean
  replicable  Boolean
  creatorId   Int
  creator     User @relation(name: "Creator", fields: [creatorId], references: [id], onDelete: Cascade)
  applicability VisibilityMode
  visibility  VisibilityMode
  answersVisibility VisibilityMode
  appliers User[] @relation(name: "Appliers") // users that can apply the protocol
  viewersUser User[] @relation(name: "ProtocolViewersUsers") // users that can see the protocol
  viewersClassroom Classroom[] @relation(name: "ProtocolViewersClassroom") // classrooms that can see the protocol
  answersViewersUser User[] @relation(name: "ProtocolAnswersViewersUsers") // users that can see the answers
  answersViewersClassroom Classroom[] @relation(name: "ProtocolAnswersViewersClassroom") // classrooms that can see the answers

  pages        Page[]
  owners        User[] @relation(name: "OwnersProtocols") // users that can edit the protocol
  applications Application[]
}

model Page {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  type      PageType
  placement Int

  itemGroups ItemGroup[]

  protocolId Int
  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
}

model ItemGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  type         ItemGroupType
  placement    Int
  isRepeatable Boolean

  tableColumns TableColumn[]
  items        Item[]

  pageId Int
  page   Page @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  text        String
  description String?
  type        ItemType
  placement   Int
  enabled     Boolean

  itemOptions     ItemOption[]
  itemAnswers     ItemAnswer[]
  optionAnswers   OptionAnswer[]
  tableAnswers    TableAnswer[]
  files           File[]
  itemValidations ItemValidation[]

  groupId   Int
  itemGroup ItemGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ItemValidation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  type          ItemValidationType
  argument      String
  customMessage String

  itemId Int
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, type])
}

model ItemOption {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  text      String
  placement Int

  optionAnswers OptionAnswer[]
  files         File[]

  itemId Int
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model TableColumn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  text      String
  placement Int

  answers TableAnswer[]

  groupId   Int
  itemGroup ItemGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model File {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  path String

  itemId       Int?
  item         Item?       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemOptionId Int?
  itemOption   ItemOption? @relation(fields: [itemOptionId], references: [id], onDelete: Cascade)
  itemAnswerId Int?
  itemAnswer   ItemAnswer? @relation(fields: [itemAnswerId], references: [id], onDelete: Cascade)
}
