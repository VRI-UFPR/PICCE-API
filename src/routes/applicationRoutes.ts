import express from 'express';
import uploader from '../services/multerUploader';
import {
    createApplication,
    updateApplication,
    getMyApplications,
    getVisibleApplications,
    getApplication,
    deleteApplication,
    getApplicationWithProtocol,
    getApplicationWithAnswers,
    getAllApplications,
} from '../controllers/applicationController';
import passport from '../services/passportAuth';

/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *   schemas:
 *     CreateApplication:
 *      type: object
 *      required:
 *        - protocolId
 *        - visibility
 *        - answersVisibility
 *        - viewersUser
 *        - viewersClassroom
 *        - answersViewersUser
 *        - answersViewersClassroom
 *      properties:
 *        id:
 *          type: integer
 *          description: Unique identifier of the application (auto-generated by default)
 *          example: 1
 *        protocolId:
 *          type: integer
 *          description: The id of the protocol
 *          example: 1
 *        visibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the application
 *          example: "PUBLIC"
 *        answersVisibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the answers
 *          example: "PUBLIC"
 *        viewersUser:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of users that can view the application
 *          example: [1, 2]
 *        viewersClassroom:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of classrooms that can view the application
 *          example: [1, 2]
 *        answersViewersUser:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of users that can view the answers
 *          example: [1, 2]
 *        answersViewersClassroom:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of classrooms that can view the answers
 *          example: [1, 2]
 *     UpdateApplication:
 *      type: object
 *      properties:
 *        id:
 *          type: integer
 *          description: Unique identifier of the application (auto-generated by default)
 *          example: 1
 *        protocolId:
 *          type: integer
 *          description: The id of the protocol
 *          example: 1
 *        visibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the application
 *          example: "PUBLIC"
 *        answersVisibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the answers
 *          example: "PUBLIC"
 *        viewersUser:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of users that can view the application
 *          example: [1, 2]
 *        viewersClassroom:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of classrooms that can view the application
 *          example: [1, 2]
 *        answersViewersUser:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of users that can view the answers
 *          example: [1, 2]
 *        answersViewersClassroom:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of classrooms that can view the answers
 *          example: [1, 2]
 *     GetApplication:
 *      type: object
 *      properties:
 *        id:
 *          type: integer
 *          description: Unique identifier of the application
 *          example: 1
 *        protocol:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the protocol
 *              example: 1
 *            title:
 *              type: string
 *              description: The title of the protocol
 *              example: "Protocol 1"
 *            description:
 *              type: string
 *              description: The description of the protocol
 *              example: "This is the first protocol"
 *        visibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the application
 *          example: "PUBLIC"
 *        answersVisibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the answers
 *          example: "PUBLIC"
 *        applier:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the user
 *              example: 1
 *            username:
 *              type: string
 *              description: The username of the user
 *              example: "johndoe"
 *        createdAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was created
 *          example: "2021-09-01T12:00:00Z"
 *        updatedAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was last updated
 *          example: "2021-09-01T12:00:00Z"
 *      example:
 *        id: 1
 *        protocol:
 *          id: 1
 *          title: "Protocol 1"
 *          description: "This is the first protocol"
 *        visibility: "PUBLIC"
 *        answersVisibility: "PUBLIC"
 *        applier:
 *          id: 1
 *          username: "johndoe"
 *        createdAt: "2021-09-01T12:00:00Z"
 *        updatedAt: "2021-09-01T12:00:00Z"
 *     GetApplicationWithViewers:
 *      type: object
 *      properties:
 *        id:
 *          type: integer
 *          description: Unique identifier of the application
 *          example: 1
 *        protocol:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the protocol
 *              example: 1
 *            title:
 *              type: string
 *              description: The title of the protocol
 *              example: "Protocol 1"
 *            description:
 *              type: string
 *              description: The description of the protocol
 *              example: "This is the first protocol"
 *        visibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the application
 *          example: "PUBLIC"
 *        answersVisibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the answers
 *          example: "PUBLIC"
 *        applier:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the user
 *              example: 1
 *            username:
 *              type: string
 *              description: The username of the user
 *              example: "johndoe"
 *        createdAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was created
 *          example: "2021-09-01T12:00:00Z"
 *        updatedAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was last updated
 *          example: "2021-09-01T12:00:00Z"
 *        viewersUser:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of users that can view the application
 *          example: [1, 2]
 *        viewersClassroom:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of classrooms that can view the application
 *          example: [1, 2]
 *        answersViewersUser:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of users that can view the answers
 *          example: [1, 2]
 *        answersViewersClassroom:
 *          type: array
 *          items:
 *            type: integer
 *          description: The list of classrooms that can view the answers
 *          example: [1, 2]
 *     GetApplicationWithProtocol:
 *      type: object
 *      properties:
 *        id:
 *          type: integer
 *          description: Unique identifier of the application
 *          example: 1
 *        protocol:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the protocol
 *              example: 1
 *            title:
 *              type: string
 *              description: The title of the protocol
 *              example: "Protocol 1"
 *            description:
 *              type: string
 *              description: The description of the protocol
 *              example: "This is the first protocol"
 *            pages:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  type:
 *                    type: string
 *                    enum: [ITEMS, SUBPROTOCOL]
 *                    description: The type of the page
 *                    example: "ITEMS"
 *                  placement:
 *                    type: integer
 *                    description: The placement of the page in the protocol
 *                    example: 1
 *                  itemGroups:
 *                    type: array
 *                    items:
 *                      type: object
 *                      properties:
 *                        type:
 *                          type: string
 *                          enum: [SINGLE_ITEM, MULTIPLE_ITEMS, TABLE]
 *                          description: The type of the item group
 *                          example: "SINGLE_ITEM"
 *                        placement:
 *                          type: integer
 *                          description: The placement of the item group in the page
 *                          example: 1
 *                        isRepeatable:
 *                          type: boolean
 *                          description: Whether the item group is repeatable
 *                          example: true
 *                        items:
 *                          type: array
 *                          items:
 *                            type: object
 *                            properties:
 *                              id:
 *                                type: integer
 *                                description: Unique identifier of the item
 *                                example: 1
 *                              text:
 *                                type: string
 *                                description: The text of the item
 *                                example: "This is the first item"
 *                              description:
 *                                type: string
 *                                description: The description of the item
 *                                example: "This is the first item"
 *                              type:
 *                                type: string
 *                                enum: [TEXTBOX, CHECKBOX, RADIO, SELECT, SCALE, TEXT, UPLOAD, DATEBOX, NUMBERBOX, TIMEBOX, LOCATIONBOX]
 *                                description: The type of the item
 *                                example: "TEXTBOX"
 *                              placement:
 *                                type: integer
 *                                description: The placement of the item in the item group
 *                                example: 1
 *                              itemOptions:
 *                                type: array
 *                                items:
 *                                  type: object
 *                                  properties:
 *                                    id:
 *                                      type: integer
 *                                      description: Unique identifier of the item option
 *                                      example: 1
 *                                    text:
 *                                      type: string
 *                                      description: The text of the item option
 *                                      example: "This is the first item option"
 *                                    placement:
 *                                      type: integer
 *                                      description: The placement of the item option in the item
 *                                      example: 1
 *                              files:
 *                                type: array
 *                                items:
 *                                  type: object
 *                                  properties:
 *                                    path:
 *                                      type: string
 *                                      description: The path of the file
 *                                      example: "/path/to/file"
 *        visibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the application
 *          example: "PUBLIC"
 *        answersVisibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the answers
 *          example: "PUBLIC"
 *        applier:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the user
 *              example: 1
 *            username:
 *              type: string
 *              description: The username of the user
 *              example: "johndoe"
 *        createdAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was created
 *          example: "2021-09-01T12:00:00Z"
 *        updatedAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was last updated
 *          example: "2021-09-01T12:00:00Z"
 *     GetApplicationWithAnswers:
 *      type: object
 *      properties:
 *        id:
 *          type: integer
 *          description: Unique identifier of the application
 *          example: 1
 *        protocol:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the protocol
 *              example: 1
 *            title:
 *              type: string
 *              description: The title of the protocol
 *              example: "Protocol 1"
 *            description:
 *              type: string
 *              description: The description of the protocol
 *              example: "This is the first protocol"
 *            pages:
 *              type: array
 *              items:
 *                type: object
 *                properties:
 *                  type:
 *                    type: string
 *                    enum: [ITEMS, SUBPROTOCOL]
 *                    description: The type of the page
 *                    example: "ITEMS"
 *                  placement:
 *                    type: integer
 *                    description: The placement of the page in the protocol
 *                    example: 1
 *                  itemGroups:
 *                    type: array
 *                    items:
 *                      type: object
 *                      properties:
 *                        type:
 *                          type: string
 *                          enum: [SINGLE_ITEM, MULTIPLE_ITEMS, TABLE]
 *                          description: The type of the item group
 *                          example: "SINGLE_ITEM"
 *                        placement:
 *                          type: integer
 *                          description: The placement of the item group in the page
 *                          example: 1
 *                        isRepeatable:
 *                          type: boolean
 *                          description: Whether the item group is repeatable
 *                          example: true
 *                        items:
 *                          type: array
 *                          items:
 *                            type: object
 *                            properties:
 *                              id:
 *                                type: integer
 *                                description: Unique identifier of the item
 *                                example: 1
 *                              text:
 *                                type: string
 *                                description: The text of the item
 *                                example: "This is the first item"
 *                              description:
 *                                type: string
 *                                description: The description of the item
 *                                example: "This is the first item"
 *                              type:
 *                                type: string
 *                                enum: [TEXTBOX, CHECKBOX, RADIO, SELECT, SCALE, TEXT, UPLOAD, DATEBOX, NUMBERBOX, TIMEBOX, LOCATIONBOX]
 *                                description: The type of the item
 *                                example: "TEXTBOX"
 *                              placement:
 *                                type: integer
 *                                description: The placement of the item in the item group
 *                                example: 1
 *                              itemOptions:
 *                                type: array
 *                                items:
 *                                  type: object
 *                                  properties:
 *                                    id:
 *                                      type: integer
 *                                      description: Unique identifier of the item option
 *                                      example: 1
 *                                    text:
 *                                      type: string
 *                                      description: The text of the item option
 *                                      example: "This is the first item option"
 *                                    placement:
 *                                      type: integer
 *                                      description: The placement of the item option in the item
 *                                      example: 1
 *                              files:
 *                                type: array
 *                                items:
 *                                  type: object
 *                                  properties:
 *                                    path:
 *                                      type: string
 *                                      description: The path of the file
 *                                      example: "/path/to/file"
 *        visibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the application
 *          example: "PUBLIC"
 *        answersVisibility:
 *          type: string
 *          enum: [PUBLIC, RESTRICT]
 *          description: The visibility of the answers
 *          example: "PUBLIC"
 *        applier:
 *          type: object
 *          properties:
 *            id:
 *              type: integer
 *              description: Unique identifier of the user
 *              example: 1
 *            username:
 *              type: string
 *              description: The username of the user
 *              example: "johndoe"
 *        createdAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was created
 *          example: "2021-09-01T12:00:00Z"
 *        updatedAt:
 *          type: string
 *          format: date-time
 *          description: The date and time the application was last updated
 *          example: "2021-09-01T12:00:00Z"
 *        answers:
 *          type: array
 *          items:
 *            type: object
 *            properties:
 *              id:
 *                type: integer
 *                description: Unique identifier of the answer
 *                example: 1
 *              date:
 *                type: string
 *                format: date-time
 *                description: The date and time the answer was created
 *                example: "2021-09-01T12:00:00Z"
 *              user:
 *                type: object
 *                properties:
 *                  id:
 *                    type: integer
 *                    description: Unique identifier of the user
 *                    example: 1
 *                  username:
 *                    type: string
 *                    description: The username of the user
 *                    example: "johndoe"
 */
const router = express.Router();

/**
 * @swagger
 * /api/application/createApplication:
 *   post:
 *     summary: Create a new application
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             $ref: '#/components/schemas/CreateApplication'
 *     responses:
 *       201:
 *         description: The application was successfully created
 *         content:
 *           application/json:
 *             message: Application created.
 *             data:
 *               $ref: '#/components/schemas/GetApplicationWithViewers'
 *       400:
 *         description: Request data validation failed
 *         content:
 *           application/json:
 *             error:
 *               message: Bad request.
 *       500:
 *         description: A server-side error occurred while creating the application
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.post('/createApplication', passport.authenticate('jwt', { session: false }), uploader.none(), createApplication);

/**
 * @swagger
 * /api/application/updateApplication/{applicationId}:
 *   put:
 *     summary: Update an existing application by id. All the fields are optional. The nested connected fields must be passed entirely, since all the existing connected objects that are not passed will be disconnected.
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: applicationId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The id of the application to update
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             $ref: '#/components/schemas/UpdateApplication'
 *     responses:
 *       200:
 *         description: The application was successfully updated
 *         content:
 *           application/json:
 *             message: Application updated.
 *             data:
 *               $ref: '#/components/schemas/GetApplicationWithViewers'
 *       400:
 *         description: Request data validation failed
 *         content:
 *           application/json:
 *             error:
 *               message: Bad request.
 *       500:
 *         description: An server-side error occurred while updating the application
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.put('/updateApplication/:applicationId', passport.authenticate('jwt', { session: false }), uploader.none(), updateApplication);

/**
 * @swagger
 * /api/application/getMyApplications:
 *   get:
 *     summary: Get all applications created by the user
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: The list of applications was successfully retrieved
 *         content:
 *           application/json:
 *             message: All applications found.
 *             data:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/GetApplicationWithViewers'
 *       500:
 *         description: An error occurred while retrieving the list of applications
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.get('/getMyApplications', passport.authenticate('jwt', { session: false }), uploader.none(), getMyApplications);

/**
 * @swagger
 * /api/application/getVisibleApplications:
 *   get:
 *     summary: Get all applications that are visible to the user
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: The list of applications was successfully retrieved
 *         content:
 *           application/json:
 *             message: All applications found.
 *             data:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/GetApplicationWithViewers'
 *       500:
 *         description: An error occurred while retrieving the list of applications
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.get('/getVisibleApplications', passport.authenticate('jwt', { session: false }), uploader.none(), getVisibleApplications);

/**
 * @swagger
 * /api/application/getAllApplications:
 *   get:
 *     summary: Get all applications
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: The list of applications was successfully retrieved
 *         content:
 *           application/json:
 *             message: All applications found.
 *             data:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/GetApplicationWithViewers'
 *       500:
 *         description: An error occurred while retrieving the list of applications
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.get('/getAllApplications', passport.authenticate('jwt', { session: false }), uploader.none(), getAllApplications);

/**
 * @swagger
 * /api/application/getApplication/{applicationId}:
 *   get:
 *     summary: Get an application by id
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: applicationId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The id of the application to retrieve
 *     responses:
 *       200:
 *         description: The application was successfully retrieved
 *         content:
 *           application/json:
 *             message: Application found.
 *             data:
 *               $ref: '#/components/schemas/GetApplicationWithViewers'
 *       404:
 *         description: Application not found
 *         content:
 *           application/json:
 *             error:
 *               message: Application not found.
 *       500:
 *         description: An error occurred while retrieving the application
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.get('/getApplication/:applicationId', passport.authenticate('jwt', { session: false }), uploader.none(), getApplication);

/**
 * @swagger
 * /api/application/getApplicationWithProtocol/{applicationId}:
 *   get:
 *     summary: Get an application by id with nested protocol
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: applicationId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The id of the application to retrieve
 *     responses:
 *       200:
 *         description: The application was successfully retrieved
 *         content:
 *           application/json:
 *             message: Application found.
 *             data:
 *               $ref: '#/components/schemas/GetApplicationWithProtocol'
 *       404:
 *         description: Application not found
 *         content:
 *           application/json:
 *             error:
 *               message: Application not found.
 *       500:
 *         description: An error occurred while retrieving the application
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.get(
    '/getApplicationWithProtocol/:applicationId',
    passport.authenticate('jwt', { session: false }),
    uploader.none(),
    getApplicationWithProtocol
);

/**
 * @swagger
 * /api/application/getApplicationWithAnswers/{applicationId}:
 *   get:
 *     summary: Get an application by id with nested answers
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: applicationId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The id of the application to retrieve
 *     responses:
 *       200:
 *         description: The application was successfully retrieved
 *         content:
 *           application/json:
 *             message: Application found.
 *             data:
 *               $ref: '#/components/schemas/GetApplicationWithAnswers'
 *       404:
 *         description: Application not found
 *         content:
 *           application/json:
 *             error:
 *               message: Application not found.
 *       500:
 *         description: An error occurred while retrieving the application
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.get(
    '/getApplicationWithAnswers/:applicationId',
    passport.authenticate('jwt', { session: false }),
    uploader.none(),
    getApplicationWithAnswers
);

/**
 * @swagger
 * /api/application/deleteApplication/{applicationId}:
 *   delete:
 *     summary: Delete an application by id
 *     tags: [Application]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: applicationId
 *         schema:
 *           type: integer
 *         required: true
 *         description: The id of the application to delete
 *     responses:
 *       200:
 *         description: The application was successfully deleted
 *         content:
 *           application/json:
 *             message: Application deleted.
 *             data:
 *               type: object
 *               properties:
 *                 id:
 *                   type: integer
 *                   description: Unique identifier of the application
 *                   example: 1
 *       404:
 *         description: Application not found
 *         content:
 *           application/json:
 *             error:
 *               message: Application not found.
 *       500:
 *         description: An error occurred while deleting the application
 *         content:
 *           application/json:
 *             error:
 *               message: Internal server error.
 */
router.delete('/deleteApplication/:applicationId', passport.authenticate('jwt', { session: false }), uploader.none(), deleteApplication);

export default router;
